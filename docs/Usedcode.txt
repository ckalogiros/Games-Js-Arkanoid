*/
/******************************************************/
/* 
function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
  
  function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = v[1];
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = v[2];
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}


*/
/******************************************************/
/* 
function fromRotation(out, rad, axis) {
  let x = axis[0],
      y = axis[1],
      z = axis[2];
  let len = Math.sqrt(x * x + y * y + z * z);
  let s = void 0,
      c = void 0,
      t = void 0;

  if (Math.abs(len) < glMatrix.EPSILON) {
    return null;
  }

  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;

  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c;

  // Perform rotation-specific matrix multiplication
  out[0] = x * x * t + c;
  out[1] = y * x * t + z * s;
  out[2] = z * x * t - y * s;
  out[3] = 0;
  out[4] = x * y * t - z * s;
  out[5] = y * y * t + c;
  out[6] = z * y * t + x * s;
  out[7] = 0;
  out[8] = x * z * t + y * s;
  out[9] = y * z * t - x * s;
  out[10] = z * z * t + c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

  
} 


*/
/******************************************************/
/* 
function oneDimArrConvertion( arr, len1, len2, len3, len4  ) {
  
  let out = [];
  let numVerts = 4;
  
  let index = 0;
  let i = 0;
  let i1 = 0;
  let i2 = 0;
  let i3 = 0;
  let i4 = 0;



  while( i1 < len1 ) {
    for( i=0; i<numVerts; ++i )
      out[index++] = arr[0][i1];
    i1++;
  }
  while( i2 < len2 ) {
    for( i=0; i<numVerts; ++i )
      out[index++] = arr[1][i2][0];
    for( i=0; i<numVerts; ++i )
      out[index++] = arr[1][i2][1];
    for( i=0; i<numVerts; ++i )  
      out[index++] = arr[1][i2][2];
    i2++;
  }
  while( i3 < len3 ) {
    for( i=0; i<numVerts; ++i )
      out[index++] = arr[2][i3][0];
    for( i=0; i<numVerts; ++i )
      out[index++] = arr[2][i3][1];
    for( i=0; i<numVerts; ++i )
      out[index++] = arr[2][i3][2];
    i3++;
  }
  while( i4 < len4 ) {
    for( i=0; i<numVerts; ++i )
      out[index++] = arr[3][i4][0];
    for( i=0; i<numVerts; ++i )
      out[index++] = arr[3][i4][1];
    for( i=0; i<numVerts; ++i )
      out[index++] = arr[3][i4][2];
    i4++;
  }
  
  
  return out;
}



*/
/******************************************************/
/* 
function pushInterleaved( arr1, arr2, arr3, arr4 ) {
	
	let out = new Array;
	
	let len = arr3.length / 4;

	let wPosPerVertex = 3;
	let posPerVertex = 3;
	let colsPerVertex = 4;
	let uvPerVertex = 2;
	let k = 0, l = 0;
	
	for( let i = 0; i < len; i++ ) {
		for( let j = 0; j < wPosPerVertex; j++ ) {
			out[k++] = arr1[l++];
		}
		k += posPerVertex + colsPerVertex + uvPerVertex;
	}
	
	l = 0;
	k = wPosPerVertex;
	for( let i = 0; i < len; i++ ) {
		for( let j = 0; j < posPerVertex; j++ ) {
			out[k++] = arr2[l++];
		}
		k += colsPerVertex + uvPerVertex + wPosPerVertex;
	}
	
	l = 0;
	k = wPosPerVertex + posPerVertex;
	if( arr3 ) {
		for( let i = 0; i < len; i++ ) {
			for( let j = 0; j < colsPerVertex; j++ ) {
				out[k++] = arr3[l++];
			}
			k += uvPerVertex + wPosPerVertex + posPerVertex;
		}
	}
  
  l = 0;
	k = wPosPerVertex + posPerVertex + colsPerVertex;
	if( arr4 ) {
		for( let i = 0; i < len; i++ ) {
			for( let j = 0; j < uvPerVertex; j++ ) {
				out[k++] = arr4[l++];
			}
			k += wPosPerVertex + posPerVertex + colsPerVertex;
		}
	}

	return out;
	
}

*/
/******************************************************/
/* 

function ObjFileToFaces( ) {
	
	let arr = [ 

		1 ,		14,		13 ,
		2 ,		14,		16 ,
		1 ,		13,		18 ,
		1 ,		18,		20 ,
		1 ,		20,		17 ,
		2 ,		16,		23 ,
		3 ,		15,		25 ,
		4 ,		19,		27 ,
		5 ,		21,		29 ,
		6 ,		22,		31 ,
		2 ,		23,		26 ,
		3 ,		25,		28 ,
		4 ,		27,		30 ,
		5 ,		29,		32 ,
		6 ,		31,		24 ,
		7 ,		33,		38 ,
		8 ,		34,		40 ,
		9 ,		35,		41 ,
		10,		36,		42 ,
		11,		37,		39 ,
		39,		42,		12 ,
		39,		37,		42 ,
		37,		10,		42 ,
		42,		41,		12 ,
		42,		36,		41 ,
		36,		9 	,		41 ,
		41,		40 ,		12 ,
		41,		35 ,		40 ,
		35,		8 	,		40 ,
		40,		38 ,		12 ,
		40,		34 ,		38 ,
		34,		7 	,		38 ,
		38,		39 ,		12 ,
		38,		33 ,		39 ,
		33,		11 ,		39 ,
		24,		37 ,		11 ,
		24,		31 ,		37 ,
		31,		10 ,		37 ,
		32,		36 ,		10 ,
		32,		29 ,		36 ,
		29,		9 	,		36 ,
		30,		35 ,		9   ,
		30,		27 ,		35 ,
		27,		8 	,		35 ,
		28,		34 ,		8   ,
		28,		25 ,		34 ,
		25,		7 	,		34 ,
		26,		33 ,		7   ,
		26,		23 ,		33 ,
		23,		11 ,		33 ,
		31,		32 ,		10 ,
		31,		22,		32 ,
		22,		5  ,		32 ,
		29,		30,		9   ,
		29,		21,		30 ,
		21,		4 	,		30 ,
		27,		28,		8   ,
		27,		19,		28 ,
		19,		3 	,		28 ,
		25,		26,		7   ,
		25,		15,		26 ,
		15,		2 	,		26 ,
		23,		24,		11 ,
		23,		16,		24 ,
		16,		6  ,		24 ,
		17,		22,		6   ,
		17,		20,		22 ,
		20,		5 	,		22 ,
		20,		21,		5   ,
		20,		18,		21 ,
		18,		4 	,		21 ,
		18,		19,		4   ,
		18,		13,		19 ,
		13,		3 	,		19 ,
		16,		17,		6   ,
		16,		14,		17 ,
		14,		1 	,		17 ,
		13,		15,		3   ,
		13,		14,		15 ,
		14,		2 	,		15 ,
		
	];

	let arr1 = [ ];
	
	let len3 = arr.length;
	
	for( let i = 0; i < len3; i++ ) 
		for( let j = 0; j < len3; j++ )
			if( arr[i] === j+1  )
				arr1[i] = j;

	return arr1;
}

/**************************/


// no vertex duplicates  
/* function textMesh( verts ) {
	
	let len = verts.length;					//console.log(len);
	let offset = 0;
//console.log("len",len);
	let x = new Array( len );
	let y = verts[0].y;
	let z = verts[0].z;
	
	let mesh = new Array;
	
	// Init x pos values
	for( let i = 0; i < len; i++ ) {
		x[i] = verts[i].x *2;	
		offset += x[i];
		//console.log(x[i].toFixed(1));
	}

//console.log("off: ", offset);
//console.log("_____________");
//console.log("len",len);
	for( let i = 0; i < len+1; i++ ) {
		
		if( i === 0 ) {
			// Start Pos of vertex
			mesh.push( -offset/2 ); mesh.push(  y ); mesh.push( z );
			mesh.push( -offset/2 ); mesh.push( -y ); mesh.push( z );
			//console.log((-offset/2).toFixed(2));
			offset = -offset/2;
			y *= -1;


		}
		else {

			offset += x[i-1];
			
			mesh.push( offset ); mesh.push(  y ); mesh.push( z );
			mesh.push( offset ); mesh.push( -y ); mesh.push( z );
			//console.log(offset.toFixed(2));
			
			y*=-1;
		}

	}
//console.log("_____________");
	return mesh;
	
}
 */
 /**************************/
	
	//console.log("Faces: ",data.faces)
/* 	
	indices[0] = 0;
	indices[1] = 1;
	indices[2] = 2;
	//console.log(indices[0],indices[1],indices[2]);
	indices[3] = 0;
	indices[4] = 2;
	indices[5] = 3
	
	indices[6] = 4;
	indices[7] = 5;
	indices[8] = 6;
	//console.log(indices[0],indices[1],indices[2]);
	indices[9] = 4;
	indices[10] = 6;
	indices[11] = 7
	           
	indices[12] = 8;
	indices[13] = 9;
	indices[14] = 10;
               
	indices[15] = 8;
	indices[16] = 10;
	indices[17] = 11
	           
	indices[18] = 12;
	indices[19] = 13;
	indices[20] = 14;

	indices[21] = 12;
	indices[22] = 14;
	indices[23] = 15	
	
	indices[24] = 16;
	indices[25] = 17;
	indices[26] = 18;
	indices[27] = 16;
	indices[28] = 18;
	indices[29] = 19; */

/**************************/
// for no duplicates
/* function textMeshIndices( data, len ) {
	
	let indices = new Array;
	let offset = 2;
	let j = 3;
	let k = 3;

	console.log("Faces: ",len);
	
	indices[0] = 0;
	indices[1] = 1;
	indices[2] = 2;
	//console.log(indices[0],indices[1],indices[2]);
	indices[3] = 0;
	indices[4] = 2;
	indices[5] = 3;
	

	//console.log(indices[3],indices[4],indices[5]);
	if( data.faces > 1 ) {
		for( let i = 0; i < Math.floor(len/3); i++ ) {
	
			indices.push( k );			// 3
			indices.push( k -  1 );	// 2
			indices.push( ++j );	// 4
			//console.log(k, k-1, j);
			
			indices.push( k );			// 3
			indices.push( k + 1 );	// 4
			indices.push( ++j );	// 5
			//console.log(k, k+1, j);
			
			k += offset;
	
		}
	}
//console.log(indices);
	return indices;
	
} */
/**************************/